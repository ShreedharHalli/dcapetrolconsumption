<%- include('partials/header'); -%>
  <nav>
    <div class="nav-wrapper blue-grey darken-1">
      <a href="#" class="brand-logo">D C AJMERA</a>
      <a href="#" data-target="slide-out" class="sidenav-trigger"><i class="material-icons">menu</i></a>
      <ul id="nav-mobile" class="right hide-on-med-and-down">
        <a href="#createNewCommuteModal" class="modal-trigger btn teal darken-1">New Entry</a>
        <a class="btn teal darken-1" href="badges.html">Components</a>
        <a class="btn red darken-4 z-depth-5" href="/logout">Log Out</a>
      </ul>
    </div>
  </nav>

  <ul id="slide-out" class="sidenav">
    <li>
      <div class="user-view">
        <div class="background">
          <img src="/dcalogo.jpeg">
        </div>
        <a id="userIdElem" href="#name" data-user-id="<%= user._id %>"><span class="white-text name">
            <%= `Welcome, ${user.fullname}` %>
          </span></a>
        <!-- <a href="#email"><span class="white-text email"></span></a> -->
      </div>
    </li>
    <!-- <li><a href="#!"><i class="material-icons">business</i>D C AJMERA</a></li> -->
    <li><a href="#addMoneyToRequestersAcModal" class="modal-trigger" id="addMoneyToRequestersAc">Add Money To Requesters
        A/c</a></li>
        <li><a class="" id="showPetrolRequestsBtn" >Show Petrol Requests List</a></li>
    <li>
      <div class="divider"></div>
      <li><a class="" id="showWorkingHoursBtn" >Show Working Hours Requests List</a></li>
    </li>
    
    <li><a class="disabled" href="">Components</a></li>
    <li><a href="/logout">Log Out</a></li>
  </ul>



  <!-- CREATE NEW COMMUTE MODAL -->
  <div id="createNewCommuteModal" class="modal">
    <div class="modal-content">
      <h6 class="center">New Entry / नविन एन्ट्री</h6>
      <div class="row">
        <form class="col s12" id="createNewCommuteForm">
          <div class="row">
            <div class="input-field col s12">
              <input name="openingReadingKM" id="openingReadingKM" type="number" class="validate" step="0.01" required>
              <label for="openingReadingKM">चालू रिडींग</label>
              <div class="openingReadingKM-error"></div>
            </div>
          </div>

          <div class="file-field input-field col s12">
            <div class="btn teal darken-4">
              <span><i class="Medium material-icons">attach_file</i></span>
              <input id="openingReadingKMPhoto" type="file">
            </div>
            <div class="file-path-wrapper">
              <label for="openingReadingKMPhoto">चालू रिडींग फोटो</label>
              <input class="file-path validate" type="text">
            </div>
          </div>

          <div class="row">
            <div class="input-field col s12">
              <input name="closingReadingKM" id="closingReadingKM" type="number" class="validate" step="0.01" required>
              <label for="closingReadingKM">बंद रिडींग</label>
              <div class="closingReadingKM-error"></div>
            </div>
          </div>

          <div class="file-field input-field col s12">
            <div class="btn teal darken-4">
              <span><i class="Medium material-icons">attach_file</i></span>
              <input id="closingReadingKMPhoto" type="file">
            </div>
            <div class="file-path-wrapper">
              <label for="closingReadingKMPhoto">बंद रिडींग फोटो</label>
              <input class="file-path validate" type="text">
            </div>
          </div>

          <div class="file-field input-field col s12">
            <div class="btn teal darken-4">
              <span><i class="Medium material-icons">attach_file</i></span>
              <input id="selphiPhoto" type="file">
            </div>
            <div class="file-path-wrapper">
              <label for="selphiPhoto">साईट वरचे सेल्फी</label>
              <input class="file-path validate" type="text">
            </div>
          </div>

          <div class="row">
            <div class="input-field col s12">
              <input name="siteName" id="siteName" type="text" class="validate" required>
              <label for="siteName">Site Name / साईट चे नाव </label>
              <div class="siteName-error"></div>
            </div>
          </div>
          <div class="row">
            <div class="input-field col s12">
              <input name="commuteReason" id="commuteReason" type="text" class="validate" required>
              <label for="commuteReason">Visit Reason / जाण्याचे कारण</label>
              <div class="commuteReason-error"></div>
            </div>
          </div>
          <div class="row">
            <div class="input-field col s12">
              <input name="visitRemarks" id="visitRemarks" type="text" class="validate">
              <label for="visitRemarks">Remarks / टिप्पणी </label>
              <div class="visitRemarks-error"></div>
            </div>
          </div>
          <button class="waves-effect waves-light btn teal darken-4 center">Submit</button>
        </form>
      </div>
    </div>
  </div>


  <!-- ADD MONEY TO REQUESTER MODAL -->
  <div id="addMoneyToRequestersAcModal" class="modal" style="width: 90%;">
    <div class="modal-content">
      <h6 class="center">Add Money To Requesters Account</h6>
      <div class="row">
        <form class="col s12" id="addMoneyToRequestersAcForm">
          <div class="row">
            <div class="col s12 m6">
              <div class="row" id="userCardsContainer">
                <!-- User cards will be appended here dynamically -->
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col s12 center-align">
              <button id="" class="waves-effect waves-light btn teal darken-4">Submit</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>



  <div id="commuteList" style="display: block;">
  <div class="commuteRequestForApprover" style="margin-top: 30px; ">
    <div class="row">
      <div class="col s12 m6">
        <ul class="collapsible popout z-depth-5">
          <% if (allcommuteLogs && allcommuteLogs.length> 0) { %>
            <% allcommuteLogs.forEach((elem, index)=> { %>
              <li>
                <div class="collapsible-header"><i class="material-icons">place</i>
                  <%= elem.loggedInUserName %>
                </div>
                <div class="collapsible-body"><span>Date & Time : <%= elem.timeStamp.toLocaleString('en-US', {
                      timeZone: 'Asia/Kolkata' }); %></span></div>
                <div class="collapsible-body"><span>Opening Reading : <%= elem.openingReadingKM %> %></span></div>
                <div class="collapsible-body"><span>Opening Reading Photo : <a
                      href="<%= elem.openingReadingKMPhotoUrl %>" target="_blank">View Opening Reading KM
                      Photo</a></span></div>
                <div class="collapsible-body"><span>Closing Reading : <%= elem.closingReadingKM %></span></div>
                <div class="collapsible-body"><span>Closing Reading Photo : <a
                      href="<%= elem.closingReadingKMPhotoUrl %>" target="_blank">View Closing Reading KM
                      Photo</a></span></div>
                <div class="collapsible-body"><span>Selfie : <a href="<%= elem.selphiPhotoUrl %>" target="_blank">View
                      Selfie Photo</a></span></div>
                <div class="collapsible-body"><span>Site Name : <%= elem.siteName %></span></div>
                <div class="collapsible-body"><span>Running KM : <%= elem.runningKM %></span></div>
                <div class="collapsible-body"><span>Decision : <%= elem.decision %></span></div>
                <div class="collapsible-body center"><a class="waves-effect waves-light btn-large approveBtn"
                    docid="<%= elem._id %>">Approve</a></span></div>
                <div class="collapsible-body center"><a class="waves-effect red waves-light btn-large denyBtn"
                    docid="<%= elem._id %>">Deny</a></span></div>
              </li>
              <% }) %>
                <% } else { %>
                  <li>
                    <div class="collapsible-header"><i class="material-icons">error</i>No Requests Found</div>
                  </li>
                  <% } %>
        </ul>
      </div>
    </div>
  </div>

</div>

 <div id="showWorkingHoursList" style="display: none;">
  <div class="workingHoursLogsForApprover" style="margin-top: 30px; ">
    <div class="row">
      <div class="col s12 m6">
        <ul class="collapsible popout z-depth-5">
          <% if (workingHoursLogsForApprover && workingHoursLogsForApprover.length> 0) { %>
            <% workingHoursLogsForApprover.forEach((elem, index)=> { %>
              <li>
                <div class="collapsible-header"><i class="material-icons">place</i>
                  <%= elem.loggedInUserName %>
                </div>
                <div class="collapsible-body"><span>Date & Time : <%= elem.timeStamp.toLocaleString('en-US', {
                      timeZone: 'Asia/Kolkata' }); %></span></div>
                <div class="collapsible-body"><span>Machine Id : <%= elem.workingHoursMachineId %> %></span></div>
                <div class="collapsible-body"><span>Opening Reading : <%= elem.workingHoursOpeningReadingKM %> %></span></div>
                <div class="collapsible-body"><span>Opening Reading Photo : <a
                      href="<%= elem.workingHoursOpeningReadingKMPhoto %>" target="_blank">View Opening Reading KM
                      Photo</a></span></div>
                <div class="collapsible-body"><span>Closing Reading : <%= elem.workingHoursclosingReadingKM %></span></div>
                <div class="collapsible-body"><span>Closing Reading Photo : <a
                      href="<%= elem.workingHoursclosingReadingPhoto %>" target="_blank">View Closing Reading KM
                      Photo</a></span></div>
                <div class="collapsible-body"><span>Running Hours : <%= elem.runningKM %></span></div>
                <div class="collapsible-body"><span>Decision : <%= elem.decision %></span></div>
                <div class="collapsible-body center"><a class="waves-effect waves-light btn-large workingHrsApproveBtn"
                    docid="<%= elem._id %>">Approve</a></span></div>
                <div class="collapsible-body center"><a class="waves-effect red waves-light btn-large workingHrsdenyBtn"
                    docid="<%= elem._id %>">Deny</a></span></div>
              </li>
              <% }) %>
                <% } else { %>
                  <li>
                    <div class="collapsible-header"><i class="material-icons">error</i>No Requests Found</div>
                  </li>
                  <% } %>
        </ul>
      </div>
    </div>
 </div>









  <script>
    const loggedInUserElem = document.getElementById('userIdElem');
    const loggedInUserId = loggedInUserElem.getAttribute('data-user-id');

    const commuteEntryForm = document.getElementById('createNewCommuteForm');
    commuteEntryForm.addEventListener('submit', async (evt) => {
      evt.preventDefault();

      const formData = new FormData();
      formData.append('loggedInUserId', loggedInUserId);
      formData.append('openingReadingKM', commuteEntryForm.openingReadingKM.value);
      formData.append('openingReadingKMPhoto', commuteEntryForm.openingReadingKMPhoto.files[0]);
      formData.append('closingReadingKM', commuteEntryForm.closingReadingKM.value);
      formData.append('closingReadingKMPhoto', commuteEntryForm.closingReadingKMPhoto.files[0]);
      formData.append('selphiPhoto', commuteEntryForm.selphiPhoto.files[0]);
      formData.append('siteName', commuteEntryForm.siteName.value);
      formData.append('commuteReason', commuteEntryForm.commuteReason.value);
      formData.append('visitRemarks', commuteEntryForm.visitRemarks.value);

      const res = await fetch('/createcommute', {
        method: 'POST', // headers: {'Content-Type': 'application/json'}, not userd because this is not json
        body: formData
      });

      const data = await res.json();
      console.log(data);
    });

    const approveBtn = document.querySelectorAll('.approveBtn');
    approveBtn.forEach(btnForThatDoc => {
      btnForThatDoc.addEventListener('click', async () => {
        const docid = btnForThatDoc.getAttribute('docid');
        try {
          const res = await fetch('/approvecommute', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: docid })
          });
          const data = await res.json();
          if (data.message === 'Commute log approved successfully') {
            location.assign('/approverpage')
          } else {
            console.log(data);
          }
        } catch (error) {
          console.log(error);
        }

      });
    });

    const denyBtn = document.querySelectorAll('.denyBtn');
    denyBtn.forEach(btnForThatDoc => {
      btnForThatDoc.addEventListener('click', async () => {
        const docid = btnForThatDoc.getAttribute('docid');
        console.log(docid);
        try {
          const res = await fetch('/denycommute', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: docid })
          });
          const data = await res.json();
          if (data.message === 'Commute log denied successfully') {
            location.assign('/approverpage')
          } else {
            console.log(data);
          }
        } catch (error) {
          console.log(error);
        }

      });
    });



    const addMoneyToRequestersAcBtn = document.getElementById('addMoneyToRequestersAc');
addMoneyToRequestersAcBtn.addEventListener('click', async (event) => {
  try {
    const res = await fetch('/getrequestersavailablemoney', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    const data = await res.json();
    const userCardsContainer = document.getElementById('userCardsContainer');
    userCardsContainer.innerHTML = ''; // Clear existing cards
    if (data.allUser.length > 0) {
      data.allUser.forEach(user => {
        const userCard = document.createElement('div');
        userCard.className = 'col s12 m6';
        userCard.innerHTML = `
          <div class="card blue-grey darken-1" style="height: 350px;">
            <div class="card-content white-text">
              <span class="card-title">${user.fullname}</span>
              <p>Total Running KM: ${user.lastTotalRunningKM} KM <br> Balance Amount: Rs. ${parseFloat(user.presentlyAvailableAmount).toFixed(2)}</p>
            </div>
            <div class="card-action">
              <div class="input-field" style="margin-top: -10%;">
                <input name="amountGiven_${user._id}" id="amountGiven_${user._id}" type="number" class="validate amountCredited">
                <label for="amountGiven_${user._id}">Amount To Be Credited</label>
              </div>
              <div class="input-field">
                <input name="amountGivenDt_${user._id}" id="amountGivenDt_${user._id}" type="text" class="validate datepicker">
                <label for="amountGivenDt_${user._id}">Date</label>
              </div>
              <div class="input-field col s12">
                <select id="paymentMode_${user._id}" class="black-text darken-4">
                  <option value="" disabled selected></option>
                  <option value="CASH">CASH</option>
                  <option value="BANK DEPOSIT">BANK DEPOSIT</option>
                </select>
                <label for="paymentMode_${user._id}">Mode Of Payment</label>
              </div>
            </div>
          </div>
        `;
        userCardsContainer.appendChild(userCard);

        // Initialize datepicker
        const dateElems = document.querySelectorAll(`#amountGivenDt_${user._id}`);
        M.Datepicker.init(dateElems, { format: 'dd-mm-yyyy' });

        // Initialize select element
        const selectElems = document.querySelectorAll(`#paymentMode_${user._id}`);
        M.FormSelect.init(selectElems);
      });
    } else {
      console.log('Unable to fetch user data');
    }
  } catch (error) {
    console.log(error);
  }
});



    const addMoneyToRequestersAcForm = document.getElementById('addMoneyToRequestersAcForm');
addMoneyToRequestersAcForm.addEventListener('submit', async (event) => {
  event.preventDefault();

  const elems = document.querySelectorAll('.amountCredited');
  const moneyIssuedUsersOnly = [];

  elems.forEach((elem) => {
    const userId = elem.id.replace('amountGiven_', ''); // Extract user ID from element ID
    const amountGiven = elem.value; // Get the amount input value
    const dateElem = document.getElementById(`amountGivenDt_${userId}`);
    const amountGivenDt = dateElem.value; // Get the date input value
    const paymentElem = document.getElementById(`paymentMode_${userId}`); // Get the payment
    const paymentMode = paymentElem.value; // Get the payment
    if (parseInt(amountGiven) > 0) {
      moneyIssuedUsersOnly.push({ amountGivenDt, amountGiven, userId, paymentMode });
    }
  });

   try {
    const res = await fetch('/addmoneytorequestersac', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ moneyIssuedUsersOnly })
    });

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    const data = await res.json();
    if (data.message === 'Users updated and transactions recorded successfully') {
      // Reset all input fields
      elems.forEach((elem) => {
        elem.value = '';
      });

      // Reset date input fields
      moneyIssuedUsersOnly.forEach((item) => {
        const dateElem = document.getElementById(`amountGivenDt_${item.userId}`);
        if (dateElem) {
          dateElem.value = '';
        }
      });

      // Close the modal (using Materialize CSS)
      const modalElement = document.getElementById('addMoneyToRequestersAcModal');
      const instance = M.Modal.getInstance(modalElement);
      instance.close();
    } else {
      console.log(data.message);
    }
  } catch (error) {
    console.error('Error:', error);
  } 
});


const showWorkingHoursBtn = document.getElementById('showWorkingHoursBtn');
showWorkingHoursBtn.addEventListener('click', async (e) => {
    document.getElementById('commuteList').style.display = 'none';
    document.getElementById('showWorkingHoursList').style.display = 'block';
    const sidenavInstance = M.Sidenav.getInstance(document.querySelector('.sidenav'));
    sidenavInstance.close();
});

const showPetrolRequestsBtn = document.getElementById('showPetrolRequestsBtn');
showPetrolRequestsBtn.addEventListener('click', async (e) => {
    document.getElementById('commuteList').style.display = 'block';
    document.getElementById('showWorkingHoursList').style.display = 'none';
    const sidenavInstance = M.Sidenav.getInstance(document.querySelector('.sidenav'));
    sidenavInstance.close();
});



const workingHrsApproveBtn = document.querySelectorAll('.workingHrsApproveBtn');
workingHrsApproveBtn.forEach(btnForThatDoc => {
      btnForThatDoc.addEventListener('click', async () => {
        const docid = btnForThatDoc.getAttribute('docid');
        try {
          const res = await fetch('/approveworkinghrs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: docid })
          });
          const data = await res.json();
          if (data.message === 'working hrs approved successfully') {
            localStorage.setItem('workingHrsApproved', 'true');
            location.reload();
            // location.assign('/approverpage')
            // const sidenavInstance = M.Sidenav.getInstance(document.querySelector('.sidenav'));
            document.getElementById('commuteList').style.display = 'none';
            document.getElementById('showWorkingHoursList').style.display = 'block';
          } else {
            console.log(data);
          }
        } catch (error) {
          console.log(error);
        }

      });
    });



    const workingHrsdenyBtn = document.querySelectorAll('.workingHrsdenyBtn');
    workingHrsdenyBtn.forEach(btnForThatDoc => {
      btnForThatDoc.addEventListener('click', async () => {
        const docid = btnForThatDoc.getAttribute('docid');
        try {
          const res = await fetch('/denyworkinghrs', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: docid })
          });
          const data = await res.json();
          if (data.message === 'working hrs denied successfully') {
            location.assign('/approverpage')
            const sidenavInstance = M.Sidenav.getInstance(document.querySelector('.sidenav'));
            document.getElementById('commuteList').style.display = 'none';
            document.getElementById('showWorkingHoursList').style.display = 'block';
          } else {
            console.log(data);
          }
        } catch (error) {
          console.log(error);
        }

      });
    });










  </script>


  <%- include('partials/footer'); -%>